java中贯穿IO的装饰者设计模式

继承是对类的功能扩展，是静态的；
装饰者模式是对 对象的功能扩展，是动态的。
优点:
   1.继承的有力补充，比继承灵活，不改变原有对象的情况下给一个对象扩展功能。（继承在扩展功能是静态的，必须在编译时就确定好，而使用装饰者可以在运行时决定，装饰者也建立在继承的基础之上的）
   2.通过使用不同装饰类以及这些类的排列组合，可以实现不同的效果。
   3.符合开闭原则
缺点
   1.会出现更多的代码，更多的类，增加程序的复杂性。
   2.动态装饰时，多层装饰时会更复杂。
    （使用继承来拓展功能会增加类的数量，使用装饰者模式不会像继承那样增加那么多类的数量但是会增加对象的数量，当对象的数量增加到一定的级别时，无疑会大大增加我们代码调试的难度)



装饰者和代理模式对比：
  》装饰者模式关注的是对象的动态添加功能。
  》代理模式关注的是对对象的控制访问，对它的用户隐藏对象的具体信息。